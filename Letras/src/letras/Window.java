/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package letras;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author VictorMolina
 */
public class Window extends javax.swing.JFrame {
    String path = "";   //file directory
    //initial values
    int yDim = 1;
    int xDim = 1;
    int lDim = 1;
    
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        original = new javax.swing.JLabel();
        file = new javax.swing.JButton();
        sizeL = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        x = new javax.swing.JLabel();
        xSize = new javax.swing.JSpinner();
        ySize = new javax.swing.JSpinner();
        y = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        filter = new javax.swing.JMenu();
        colorsW = new javax.swing.JMenuItem();
        grayScale = new javax.swing.JMenuItem();
        imageW = new javax.swing.JMenuItem();
        colorsWT = new javax.swing.JMenuItem();
        dB = new javax.swing.JMenuItem();
        dN = new javax.swing.JMenuItem();
        naipes = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        original.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        file.setText("Seleccionar Archivo");
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        sizeL.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel1.setText("Tama√±o de Letra");

        x.setText("X");

        xSize.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        ySize.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        y.setText("Y");

        filter.setText("Filtro");

        colorsW.setText("Colores sin Letra");
        colorsW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorsWActionPerformed(evt);
            }
        });
        filter.add(colorsW);

        grayScale.setText("Tonos de Gris");
        grayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayScaleActionPerformed(evt);
            }
        });
        filter.add(grayScale);

        imageW.setText("Imagen con Letras");
        imageW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageWActionPerformed(evt);
            }
        });
        filter.add(imageW);

        colorsWT.setText("Colores con Texto");
        colorsWT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorsWTActionPerformed(evt);
            }
        });
        filter.add(colorsWT);

        dB.setText("Domino Blancas");
        dB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dBActionPerformed(evt);
            }
        });
        filter.add(dB);

        dN.setText("Domino Negras");
        dN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dNActionPerformed(evt);
            }
        });
        filter.add(dN);

        naipes.setText("Naipes");
        naipes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naipesActionPerformed(evt);
            }
        });
        filter.add(naipes);

        jMenuBar1.add(filter);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(original, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sizeL, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(x)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(xSize, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(y)
                .addGap(5, 5, 5)
                .addComponent(ySize, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(file)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(original, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(file)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sizeL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(x)
                            .addComponent(xSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(y))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * This method resize the original size of the image to a
     * size that fits on the label
     * @param image - path of the image
     * @return an image that fits on the jlabel
     */
    private ImageIcon resizeOriginalImage(String image){
        ImageIcon myImage = new ImageIcon(image);
        Image img = myImage.getImage();
        Image newImg = img.getScaledInstance(original.getWidth(), original.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon finalImage = new ImageIcon(newImg);
        return finalImage;
    }
    
    /**
     * This method acts after the Colores sin Letra button is selected
     * @param evt 
     */
    private void colorsWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorsWActionPerformed
        xDim = Integer.parseInt(xSize.getValue().toString());
        yDim = Integer.parseInt(ySize.getValue().toString());
        lDim = Integer.parseInt(sizeL.getValue().toString());
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.coloresLetra(xDim, yDim, lDim);
            JOptionPane.showMessageDialog(null, "Proceso Completado.\n"
                                                +"Abre el archivo 'Imagen.html' para ver el resultado");
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_colorsWActionPerformed
    
    /**
     * This method acts after the "seleccionar archivo" button is selected
     * Selects an image from the user's compueter
     * @param evt 
     */
    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        JFileChooser fileC = new JFileChooser();
        fileC.setDialogTitle("Selecciona una Imagen");
        //Filter to show only files jpg and bmp
        FileNameExtensionFilter filterExtension = new FileNameExtensionFilter("jpg,jpeg,bmp,png","jpg","jpeg","bmp","png");
        fileC.setFileFilter(filterExtension);
        int result = fileC.showOpenDialog(null);
        //check if the user selects the accept button
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = fileC.getSelectedFile();
            path = selectedFile.getAbsolutePath(); //pathOutput of the file
            original.setIcon(resizeOriginalImage(path)); //resize the original file an sets the final image to the labell
        }
    }//GEN-LAST:event_fileActionPerformed
    
   
    /**
     * This method acts after the Tonos de Gris button is selected
     * @param evt 
     */
    private void grayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayScaleActionPerformed
        xDim = Integer.parseInt(xSize.getValue().toString());
        yDim = Integer.parseInt(ySize.getValue().toString());
        lDim = Integer.parseInt(sizeL.getValue().toString());
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.grisesLetra(xDim, yDim, lDim);
            JOptionPane.showMessageDialog(null, "Proceso Completado.\n"
                                                +"Abre el archivo 'Imagen.html' para ver el resultado");
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_grayScaleActionPerformed
    
    /**
     * This method acts after the Imagen con Letras button is selected
     * @param evt 
     */
    private void imageWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageWActionPerformed
        xDim = Integer.parseInt(xSize.getValue().toString());
        yDim = Integer.parseInt(ySize.getValue().toString());
        lDim = Integer.parseInt(sizeL.getValue().toString());
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.imagenLetra(xDim, yDim, lDim);
            JOptionPane.showMessageDialog(null, "Proceso Completado.\n"
                                                +"Abre el archivo 'Imagen.html' para ver el resultado");
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imageWActionPerformed
    
    /**
     * This method acts after the Naipes button is selected
     * @param evt 
     */
    private void naipesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naipesActionPerformed
        xDim = Integer.parseInt(xSize.getValue().toString());
        yDim = Integer.parseInt(ySize.getValue().toString());
        lDim = Integer.parseInt(sizeL.getValue().toString());
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.naipes(xDim, yDim, lDim);
            JOptionPane.showMessageDialog(null, "Proceso Completado.\n"
                                                +"Abre el archivo 'Imagen.html' para ver el resultado");
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_naipesActionPerformed
    
    /**
     * This method acts after the Domino Blancas button is selected
     * @param evt 
     */
    private void dBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dBActionPerformed
        xDim = Integer.parseInt(xSize.getValue().toString());
        yDim = Integer.parseInt(ySize.getValue().toString());
        lDim = Integer.parseInt(sizeL.getValue().toString());
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.dominoB(xDim, yDim, lDim);
            JOptionPane.showMessageDialog(null, "Proceso Completado.\n"
                                                +"Abre el archivo 'Imagen.html' para ver el resultado");
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dBActionPerformed
    
    /**
     * This method acts after the Domino Negras button is selected
     * @param evt 
     */
    private void dNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dNActionPerformed
        xDim = Integer.parseInt(xSize.getValue().toString());
        yDim = Integer.parseInt(ySize.getValue().toString());
        lDim = Integer.parseInt(sizeL.getValue().toString());
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.dominoN(xDim, yDim, lDim);
            JOptionPane.showMessageDialog(null, "Proceso Completado.\n"
                                                +"Abre el archivo 'Imagen.html' para ver el resultado");
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dNActionPerformed
    
    /**
     * This method acts after the Colores con Texto button is selected
     * @param evt 
     */
    private void colorsWTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorsWTActionPerformed
        xDim = Integer.parseInt(xSize.getValue().toString());
        yDim = Integer.parseInt(ySize.getValue().toString());
        lDim = Integer.parseInt(sizeL.getValue().toString());
        TextWindow window = new TextWindow(this,true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        window.setTitle("Seleccionar Archivo");
        window.setLocation(dim.width/2-window.getSize().width/2, dim.height/2-window.getSize().height/2); //Center the window
        window.setVisible(true);
        String textPath = window.getPath();
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null || textPath == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.coloresTexto(textPath,xDim, yDim, lDim);
            JOptionPane.showMessageDialog(null, "Proceso Completado.\n"
                                                +"Abre el archivo 'Imagen.html' para ver el resultado");
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_colorsWTActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem colorsW;
    private javax.swing.JMenuItem colorsWT;
    private javax.swing.JMenuItem dB;
    private javax.swing.JMenuItem dN;
    private javax.swing.JButton file;
    private javax.swing.JMenu filter;
    private javax.swing.JMenuItem grayScale;
    private javax.swing.JMenuItem imageW;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem naipes;
    private javax.swing.JLabel original;
    private javax.swing.JSpinner sizeL;
    private javax.swing.JLabel x;
    private javax.swing.JSpinner xSize;
    private javax.swing.JLabel y;
    private javax.swing.JSpinner ySize;
    // End of variables declaration//GEN-END:variables
}
