/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filtros;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author VictorMolina
 */
public class Window extends javax.swing.JFrame {
    String path = ""; //file directory
    String pathOutput = "../../Downloads/Practica01/output.jpg"; //path of the output image 

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file = new javax.swing.JButton();
        original = new javax.swing.JLabel();
        modified = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        filter = new javax.swing.JMenu();
        mosaico = new javax.swing.JMenuItem();
        Inverso = new javax.swing.JMenuItem();
        altoContraste = new javax.swing.JMenuItem();
        brillo = new javax.swing.JMenuItem();
        rgbComponente = new javax.swing.JMenuItem();
        menuGris = new javax.swing.JMenu();
        metodo1 = new javax.swing.JMenuItem();
        metodo2 = new javax.swing.JMenuItem();
        metodo3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        file.setText("Seleccionar Archivo");
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        original.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        modified.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        filter.setText("Filtro");

        mosaico.setText("Mosaico");
        mosaico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mosaicoActionPerformed(evt);
            }
        });
        filter.add(mosaico);

        Inverso.setText("Inverso");
        Inverso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InversoActionPerformed(evt);
            }
        });
        filter.add(Inverso);

        altoContraste.setText("Alto Contraste");
        altoContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altoContrasteActionPerformed(evt);
            }
        });
        filter.add(altoContraste);

        brillo.setText("Brillo");
        brillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brilloActionPerformed(evt);
            }
        });
        filter.add(brillo);

        rgbComponente.setText("Componente RGB");
        rgbComponente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbComponenteActionPerformed(evt);
            }
        });
        filter.add(rgbComponente);

        menuGris.setText("Tonos de Grises");

        metodo1.setText("Averaging");
        metodo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodo1ActionPerformed(evt);
            }
        });
        menuGris.add(metodo1);

        metodo2.setText("Luma");
        metodo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodo2ActionPerformed(evt);
            }
        });
        menuGris.add(metodo2);

        metodo3.setText("Desaturation");
        metodo3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodo3ActionPerformed(evt);
            }
        });
        menuGris.add(metodo3);

        filter.add(menuGris);

        menuBar.add(filter);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(original, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modified, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(file, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(original, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modified, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(file)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * This method resize the original size of the image to a
     * size that fits on the label
     * @param image - pathOutput of the image
     * @return an image that fits on the jlabel
     */
    private ImageIcon resizeImage(String image){
        ImageIcon myImage = new ImageIcon(image);
        Image img = myImage.getImage();
        Image newImg = img.getScaledInstance(original.getWidth(), original.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon finalImage = new ImageIcon(newImg);
        return finalImage;
    }
    
    /**
     * This method acts after the "seleccionar archivo" button is selected
     * Selects an image from the user's compueter
     * @param evt 
     */
    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        JFileChooser fileC = new JFileChooser();
        fileC.setDialogTitle("Selecciona una Imagen");
        //Filter to show only files jpg and bmp
        FileNameExtensionFilter filterExtension = new FileNameExtensionFilter("jpg,jpeg,bmp,png","jpg","jpeg","bmp","png");
        fileC.setFileFilter(filterExtension);
        int result = fileC.showOpenDialog(null);
        //check if the user selects the accept button
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = fileC.getSelectedFile();
            path = selectedFile.getAbsolutePath(); //pathOutput of the file
            original.setIcon(resizeImage(path)); //resize the original file an sets the final image to the labell
        }
    }//GEN-LAST:event_fileActionPerformed

    /**
     * This method acts after the "Brillo" button is selected
     * Changes the bright of the image selected
     * @param evt 
     */
    @SuppressWarnings("empty-statement")
    private void brilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brilloActionPerformed
        BrilloWindow window = new BrilloWindow(this,true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        window.setTitle("Brillo");
        window.setLocation(dim.width/2-window.getSize().width/2, dim.height/2-window.getSize().height/2); //Center the window
        window.setVisible(true);
        int cantBrillo = window.getBrillo(); //gets the quantity of bright selected by the euser
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.brillo(cantBrillo);
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_brilloActionPerformed
    
    /**
     * This method acts after the "Brillo" button is selected
     * Changes the rgb of the image selected
     * @param evt 
     */
    private void rgbComponenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbComponenteActionPerformed
        RGBWindow window = new RGBWindow(this,true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        window.setTitle("Valores RGB");
        window.setLocation(dim.width/2-window.getSize().width/2, dim.height/2-window.getSize().height/2); //Center the window
        window.setVisible(true);
        int red = window.getRed(); //gets the quantity of red selected by the user
        int green = window.getGreen(); //gets the quantity of red selected by the user
        int blue = window.getBlue(); //gets the quantity of red selected by the user
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.rgb(red,green,blue);
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rgbComponenteActionPerformed
    
    /**
     * This method acts after the "Tonos de Grises - Metodo 1" button is selected
     * Retirns an image with only gray tones
     * @param evt 
     */
    private void metodo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodo1ActionPerformed
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.grisesMetodo1();
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_metodo1ActionPerformed
    
    /**
     * This method acts after the "Tonos de Grises - Metodo 2" button is selected
     * Retirns an image with only gray tones
     * @param evt 
     */
    private void metodo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodo2ActionPerformed
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.grisesMetodo2();
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_metodo2ActionPerformed

    private void metodo3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodo3ActionPerformed
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.grisesMetodo3();
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_metodo3ActionPerformed

    private void InversoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InversoActionPerformed
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.inverso();
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_InversoActionPerformed

    private void altoContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altoContrasteActionPerformed
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }
        try {
            fB.altoContraste();
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_altoContrasteActionPerformed

    private void mosaicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mosaicoActionPerformed
        DimensionWindow window = new DimensionWindow(this,true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        window.setTitle("Dimensiones");
        window.setLocation(dim.width/2-window.getSize().width/2, dim.height/2-window.getSize().height/2); //Center the window
        window.setVisible(true);
        int x = window.getX(); //gets value of x
        int y = window.getY(); //gets value of x
        Filtro fB = new Filtro(path);
        //checks if an image has beeen seleected
        if(original.getIcon() == null){
            JOptionPane.showMessageDialog(null, "Selecciona un archivo");
            return;
        }else if(x<=0||y<=0){
            JOptionPane.showMessageDialog(null, "El valor de X o Y no pueden ser menor a 1");
            return;
        }
        try {
            fB.mosaico(x, y);
            modified.setIcon(resizeImage(pathOutput));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mosaicoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Inverso;
    private javax.swing.JMenuItem altoContraste;
    private javax.swing.JMenuItem brillo;
    private javax.swing.JButton file;
    private javax.swing.JMenu filter;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuGris;
    private javax.swing.JMenuItem metodo1;
    private javax.swing.JMenuItem metodo2;
    private javax.swing.JMenuItem metodo3;
    private javax.swing.JLabel modified;
    private javax.swing.JMenuItem mosaico;
    private javax.swing.JLabel original;
    private javax.swing.JMenuItem rgbComponente;
    // End of variables declaration//GEN-END:variables
}
